# ========================================
# üöÄ CORE DEPLOYMENT MODULE - ENHANCED
# ========================================

.PHONY: deploy-complete deploy-complete-mock deploy-complete-optimized help-core \
	deploy-full-stack deploy-full-stack-mock

help-core:
	@echo ""
	@echo "üöÄ CORE DEPLOYMENT COMMANDS"
	@echo "============================"
	@echo "üéØ COMPLETE STACK DEPLOYMENT:"
	@echo "deploy-full-stack            - Complete system + Chainlink automation"
	@echo "deploy-full-stack-mock       - Complete mock system + automation"
	@echo ""
	@echo "üîß CORE SYSTEM ONLY:"
	@echo "deploy-complete              - Complete deployment with real Oracle"
	@echo "deploy-complete-mock         - Complete deployment with MockOracle + Automation"
	@echo "deploy-complete-optimized    - Production deployment with optimizations"
	@echo "deploy-emergency-registry    - Deploy emergency registry system"
	@echo ""
	@echo "üß™ TESTING COMMANDS:"
	@echo "create-test-positions        - Create test loan positions"
	@echo "crash-prices                 - Crash prices to trigger liquidations"
	@echo "generate-upkeep-config       - Generate Chainlink upkeep configuration"
	@echo "check-system-status          - Check complete system status"
	@echo ""

# ========================================
# üéØ COMPLETE STACK DEPLOYMENTS (NEW)
# ========================================

# Complete deployment with real Oracle + Chainlink Automation
deploy-full-stack:
	@echo "üéØ DEPLOYING COMPLETE VCOP STACK WITH CHAINLINK"
	@echo "==============================================="
	@echo ""
	@echo "This will deploy the complete system including:"
	@echo "1. Core VCOP lending system with real Oracle"
	@echo "2. Chainlink Automation with official registry"
	@echo "3. Complete configuration and testing"
	@echo ""
	@read -p "Continue with full deployment? (y/N): " confirm && [ "$$confirm" = "y" ] || exit 1
	@echo ""
	@echo "üöÄ Phase 1: Deploying core system..."
	@$(MAKE) deploy-complete
	@echo ""
	@echo "ü§ñ Phase 2: Deploying automation..."
	@$(MAKE) deploy-automation-complete
	@echo ""
	@echo "üéâ COMPLETE STACK DEPLOYMENT FINISHED!"
	@echo "‚úÖ Your VCOP system is fully operational with Chainlink automation"

# Complete deployment with MockOracle + Mock Automation for testing
deploy-full-stack-mock:
	@echo "üß™ DEPLOYING COMPLETE MOCK STACK"
	@echo "================================"
	@echo ""
	@echo "This will deploy the complete testing system including:"
	@echo "1. Core VCOP lending system with Mock Oracle"
	@echo "2. Mock automation for testing liquidations"
	@echo "3. Vault-funded liquidation configuration"
	@echo "4. Automated testing flow"
	@echo ""
	@echo "üöÄ Phase 1: Deploying mock core system..."
	@$(MAKE) deploy-complete-mock
	@echo ""
	@echo "ü§ñ Phase 2: Deploying mock automation..."
	@$(MAKE) deploy-automation-complete-mock-no-test
	@echo ""
	@echo "üîß Phase 3: Configuring vault-funded liquidation..."
	@$(MAKE) configure-vault-automation
	@echo ""
	@echo "üß™ Phase 4: Testing complete system..."
	@$(MAKE) test-vault-liquidation
	@echo ""
	@echo "üéâ COMPLETE MOCK STACK WITH VAULT-FUNDED LIQUIDATION FINISHED!"
	@echo "‚úÖ Your test environment is ready with:"
	@echo "   ‚Ä¢ Chainlink Automation for position monitoring"
	@echo "   ‚Ä¢ Vault-funded liquidation system (no allowance issues)"
	@echo "   ‚Ä¢ Self-sustaining liquidation mechanism"
	@echo "   ‚Ä¢ Tested and verified working system"

# ========================================
# üîß CORE SYSTEM DEPLOYMENTS
# ========================================

# Main deployment with real Oracle
deploy-complete:
	@echo "üöÄ STARTING COMPLETE CORE DEPLOYMENT (PRODUCTION)"
	@echo "=================================================="
	@echo "üì¶ Building contracts with optimizations..."
	@forge build --optimize --optimizer-runs 200
	@echo ""
	@echo "üöÄ Step 1: Deploying unified system..."
	@forge script script/deploy/DeployUnifiedSystem.s.sol:DeployUnifiedSystem \
		--rpc-url $(RPC_URL) --broadcast --legacy --gas-price 2000000000 --slow
	@echo ""
	@echo "üî• Step 2: Deploying Emergency Registry..."
	@. ./.env && forge script script/deploy/DeployEmergencyRegistry.s.sol:DeployEmergencyRegistry \
		--rpc-url $$RPC_URL --private-key $$PRIVATE_KEY --broadcast --legacy --gas-price 2000000000 --slow
	@echo ""
	@echo "üîó Step 3: Configuring Chainlink Oracle..."
	@. ./.env && forge script script/config/ConfigureChainlinkOracle.s.sol:ConfigureChainlinkOracle \
		--rpc-url $$RPC_URL --private-key $$PRIVATE_KEY --broadcast --legacy --gas-price 2000000000 --slow
	@echo ""
	@echo "üí∞ Step 4: Setting VCOP Price..."
	@. ./.env && forge script script/config/ConfigureVCOPPrice.s.sol:ConfigureVCOPPrice \
		--rpc-url $$RPC_URL --private-key $$PRIVATE_KEY --broadcast --legacy --gas-price 2000000000 --slow
	@echo ""
	@echo "üìä Step 5: Deploying Dynamic Price Registry..."
	@. ./.env && forge script script/deploy/DeployDynamicPriceRegistry.s.sol:DeployDynamicPriceRegistry \
		--rpc-url $$RPC_URL --private-key $$PRIVATE_KEY --broadcast --legacy --gas-price 2000000000 --slow
	@echo ""
	@echo "‚öôÔ∏è Step 6: Configuring Dynamic Pricing..."
	@. ./.env && forge script script/config/ConfigureDynamicPricing.s.sol:ConfigureDynamicPricing \
		--rpc-url $$RPC_URL --private-key $$PRIVATE_KEY --broadcast --legacy --gas-price 2000000000 --slow
	@echo ""
	@echo "üîó Step 7: Configuring Asset Handlers..."
	@. ./.env && forge script script/deploy/ConfigureAssetHandlers.s.sol:ConfigureAssetHandlers \
		--rpc-url $$RPC_URL --private-key $$PRIVATE_KEY --broadcast --legacy --gas-price 2000000000 --slow
	@echo ""
	@echo "‚úÖ Step 8: Verifying system status..."
	@. ./.env && forge script script/CheckOracleStatus.s.sol:CheckOracleStatus \
		--rpc-url $$RPC_URL --legacy --gas-price 2000000000
	@echo ""
	@echo "üéâ PRODUCTION CORE DEPLOYMENT COMPLETED!"
	@echo "üìä System configured with:"
	@echo "   ‚Ä¢ Real Chainlink price feeds"
	@echo "   ‚Ä¢ Dynamic pricing registry"
	@echo "   ‚Ä¢ Emergency response system"
	@echo "   ‚Ä¢ Asset handlers ready for production"
	@echo "‚úÖ Ready for Chainlink automation setup!"

# Complete deployment with MockOracle + Full Automation Setup
deploy-complete-mock:
	@echo "üß™ STARTING COMPLETE MOCK STACK DEPLOYMENT"
	@echo "==========================================="
	@echo "This will deploy the complete VCOP system with:"
	@echo "‚Ä¢ Core lending system with Mock Oracle"
	@echo "‚Ä¢ Automation-enabled VaultBasedHandler"
	@echo "‚Ä¢ Chainlink Automation configuration"
	@echo "‚Ä¢ All testing tools and liquidity"
	@echo ""
	@echo "üì¶ Building contracts..."
	@forge build
	@echo ""
	@echo "üöÄ Step 1: Deploying unified system with Mock Oracle..."
	@forge script script/deploy/DeployUnifiedSystemMock.s.sol:DeployUnifiedSystemMock \
		--rpc-url $(RPC_URL) --broadcast --legacy --gas-price 2000000000 --slow
	@echo ""
	@echo "üîß Step 2: Configuring Mock Oracle with realistic prices..."
	@. ./.env && forge script script/config/ConfigureMockOracle.s.sol:ConfigureMockOracle \
		--rpc-url $$RPC_URL --private-key $$PRIVATE_KEY --broadcast --legacy --gas-price 2000000000 --slow
	@echo ""
	@echo "üí∞ Step 3: Setting VCOP Price in Mock..."
	@. ./.env && forge script script/config/ConfigureMockVCOPPrice.s.sol:ConfigureMockVCOPPrice \
		--rpc-url $$RPC_URL --private-key $$PRIVATE_KEY --broadcast --legacy --gas-price 2000000000 --slow
	@echo ""
	@echo "üîó Step 4: Configuring Asset Handlers with initial liquidity..."
	@. ./.env && forge script script/test/ConfigureAssetHandlers.s.sol:ConfigureAssetHandlers \
		--rpc-url $$RPC_URL --private-key $$PRIVATE_KEY --broadcast --legacy --gas-price 2000000000 --slow
	@echo ""
	@echo "ü§ñ Step 5: Deploying VaultBasedHandler with Automation functions..."
	@. ./.env && forge script script/automation/RedeployVaultWithAutomation.s.sol:RedeployVaultWithAutomation \
		--rpc-url $$RPC_URL --private-key $$PRIVATE_KEY --broadcast --legacy --gas-price 2000000000 --slow
	@echo ""
	@echo "üí∞ Step 6: Transferring funds to automation vault..."
	@. ./.env && forge script script/automation/TransferFundsToNewVault.s.sol:TransferFundsToNewVault \
		--rpc-url $$RPC_URL --private-key $$PRIVATE_KEY --broadcast --legacy --gas-price 2000000000 --slow
	@echo ""
	@echo "üîê Step 7: Authorizing AutomationKeeper in vault..."
	@. ./.env && forge script script/automation/AuthorizeKeeperInVault.s.sol:AuthorizeKeeperInVault \
		--rpc-url $$RPC_URL --private-key $$PRIVATE_KEY --broadcast --legacy --gas-price 2000000000 --slow
	@echo ""
	@echo "‚úÖ Step 8: Verifying system configuration..."
	@. ./.env && forge script script/CheckMockOracleStatus.s.sol:CheckMockOracleStatus \
		--rpc-url $$RPC_URL --legacy --gas-price 2000000000
	@echo ""
	@echo "üéØ Step 9: Generating Chainlink Automation configuration..."
	@echo ""
	@echo "=================================================="
	@echo "üéØ CHAINLINK UPKEEP REGISTRATION INFORMATION"
	@echo "=================================================="
	@. ./.env && forge script script/automation/GenerateUpkeepConfig.s.sol:GenerateUpkeepConfig \
		--rpc-url $$RPC_URL --legacy --gas-price 2000000000
	@echo ""
	@echo "=================================================="
	@echo "üéâ COMPLETE MOCK STACK DEPLOYMENT FINISHED!"
	@echo "=================================================="
	@echo ""
	@echo "üìä SYSTEM STATUS:"
	@echo "‚úÖ Core lending system deployed"
	@echo "‚úÖ Mock Oracle configured with realistic prices:"
	@echo "   ‚Ä¢ ETH: $$2,500 USD"
	@echo "   ‚Ä¢ BTC: $$104,000 USD"
	@echo "   ‚Ä¢ USDC: $$1.00 USD"
	@echo "   ‚Ä¢ VCOP: $$1.00 USD"
	@echo "‚úÖ VaultBasedHandler with automation functions"
	@echo "‚úÖ 100,000 USDC liquidity for liquidations"
	@echo "‚úÖ AutomationKeeper authorized in vault"
	@echo ""
	@echo "üöÄ NEXT STEPS:"
	@echo "1. Register the upkeep using the information above"
	@echo "2. Test with: make create-test-positions"
	@echo "3. Trigger liquidations: make crash-prices"
	@echo "4. Monitor: https://automation.chain.link/base-sepolia"
	@echo ""
	@echo "üéØ YOUR COMPLETE SYSTEM IS READY! üéØ"

# Production deployment with optimizations
deploy-complete-optimized:
	@echo "üè≠ PRODUCTION DEPLOYMENT"
	@echo "======================="
	@forge build --optimize --optimizer-runs 200
	@$(MAKE) deploy-complete
	@echo "‚úÖ OPTIMIZED DEPLOYMENT COMPLETED!"

# Deploy Emergency Registry standalone
deploy-emergency-registry:
	@echo "üî• DEPLOYING EMERGENCY REGISTRY"
	@echo "==============================="
	@. ./.env && forge script script/deploy/DeployEmergencyRegistry.s.sol:DeployEmergencyRegistry \
		--rpc-url $$RPC_URL --private-key $$PRIVATE_KEY --broadcast --legacy --gas-price 30000000000 --slow
	@echo "‚úÖ Emergency Registry deployed!"

# ========================================
# üß™ TESTING COMMANDS
# ========================================

# Create test positions for liquidation testing
create-test-positions:
	@echo "üß™ CREATING TEST POSITIONS FOR LIQUIDATION"
	@echo "=========================================="
	@. ./.env && forge script script/test/Step1_CreateTestPositions.s.sol:Step1_CreateTestPositions \
		--rpc-url $$RPC_URL --private-key $$PRIVATE_KEY --broadcast --legacy --gas-price 2000000000
	@echo "‚úÖ Test positions created!"

# Crash prices to trigger liquidations
crash-prices:
	@echo "üí• CRASHING PRICES TO TRIGGER LIQUIDATIONS"
	@echo "==========================================="
	@. ./.env && forge script script/test/Step2_CrashPrices.s.sol:Step2_CrashPrices \
		--rpc-url $$RPC_URL --private-key $$PRIVATE_KEY --broadcast --legacy --gas-price 2000000000
	@echo "‚úÖ Prices crashed! Positions should be liquidatable now."

# Generate upkeep configuration
generate-upkeep-config:
	@echo "üéØ GENERATING CHAINLINK UPKEEP CONFIGURATION"
	@echo "============================================="
	@. ./.env && forge script script/automation/GenerateUpkeepConfig.s.sol:GenerateUpkeepConfig \
		--rpc-url $$RPC_URL --legacy --gas-price 2000000000
	@echo "‚úÖ Upkeep configuration generated!"

# Check system status
check-system-status:
	@echo "üîç CHECKING SYSTEM STATUS"
	@echo "========================="
	@. ./.env && forge script script/CheckMockOracleStatus.s.sol:CheckMockOracleStatus \
		--rpc-url $$RPC_URL --legacy --gas-price 2000000000
	@. ./.env && forge script script/automation/SimpleVaultCheck.s.sol:SimpleVaultCheck \
		--rpc-url $$RPC_URL --legacy --gas-price 2000000000
	@echo "‚úÖ System status checked!" 